apply plugin : 'java'

repositories {
             jcenter()
}

dependencies {
             compile fileTree("lib")
             compile 'org.choco-solver:choco-solver:3.3.1'
             compile 'dk.brics.automaton:automaton:1.11-8'
}

def a = 1
task foo{
     a += 1
}

task repeat{
//         3.times{id -> tasks.foo.execute()}
       tasks.foo.execute();
       tasks.foo.execute();
}


task compileTicketAllWidgets(type: JavaCompile) {

}

task delCatg (type: Delete) {
     delete "inputs*","isRealInput", "coverage*", "formula*", "history*"

}

//def ticketLogDir = "log/examples/ticket"
def ticketLogDir = "log/TicketAllWidgets"
def autDir = "aut"

task jarTicketAllWidgets(type: Jar, dependsOn: classes) {
     manifest {
              attributes 'Main-Class': 'examples.ticket.TicketAllWidgets'
     }

     mkdir(ticketLogDir)
//     destinationDir = file(ticketLogDir + "/dist")
     destinationDir = file(autDir)
     archiveName = "TicketAllWidgets.jar"
     from ("build/classes/main") {
          include("examples/ticket/")
     }
}

task jarTicket(type: Jar, dependsOn: classes) {
     manifest {
              attributes 'Main-Class': 'examples.ticket.Ticket'
     }

     destinationDir = file(autDir)
     archiveName = "ticket.jar"
     from ("build/classes/main") {
          include("examples/ticket/")
     }
}

def testLogDir="log/test"
task jarTestme(type: Jar, dependsOn: classes) {
     manifest {
              attributes 'Main-Class': 'examples.test.Testme'
     }

     mkdir(testLogDir)
     destinationDir = file(autDir)
     archiveName = "Testme.jar"
     from ("build/classes/main") {
          include("examples/test/")
     }
}

def radioLogDir="log/radioButton"
task jarRadioButton(type: Jar, dependsOn: classes) {
     manifest {
              attributes 'Main-Class': 'examples.radioButton.Project'
     }

     mkdir(radioLogDir)
     destinationDir = file(autDir)
     archiveName = "radioButton.jar"
     from ("build/classes/main") {
          include("examples/radioButton/")
     }
}

task jarWord(type: Jar, dependsOn: classes) {
     manifest {
              attributes 'Main-Class': 'crosswordsage.MainScreen'
     }

     destinationDir = file(autDir)
     archiveName = "CrosswordSage.jar"
     from ("build/classes/main") {
          include("crosswordsage/")
     }
}


task jarCatg(type: Jar, dependsOn: classes) {
     manifest {
              attributes 'Premain-Class': 'janala.instrument.SnoopInstructionTransformer'
     }
     destinationDir = file('./lib')
     archiveName = "catg-dev.jar"
     from ("build/classes/main") {
          include("catg/", "janala/")
     }
}

task guitarRipperTicketAllWidgets(type: JavaExec, dependsOn: jarTicketAllWidgets) {
//     classpath = files(ticketLogDir + "/dist/TicketAllWidgets.jar") + fileTree("lib")
     classpath = fileTree(autDir) + fileTree("lib")
     main = "edu.umd.cs.guitar.ripper.JFCRipperMain"
     jvmArgs = ["-Dlog4j.configuration=log/examples/ticket/guitar.log"]
     args = ["-c", "examples.ticket.TicketAllWidgets"
          , "-g",  ticketLogDir+"/ticket.GUI"
          , "-cf", "./src/main/java/examples/ticket/configure/guitar.xml"
          , "-d", "500"
          , "-i", "2000"
          , "-l" , ticketLogDir+"/ticket.log"]
}

task guitarGui2EfgTicketAllWidgets(type: JavaExec, dependsOn: guitarRipperTicketAllWidgets) {
//     classpath = files(ticketLogDir + "/dist/TicketAllWidgets.jar") + fileTree("lib")
     classpath = fileTree(autDir) + fileTree("lib")
     main = "edu.umd.cs.guitar.graph.GUIStructure2GraphConverter"
     jvmArgs = ["-Dlog4j.configuration=log/examples/ticket/guitar.log"]
     args = ["-p", "EFGConverter"
          , "-g",  ticketLogDir+"/ticket.GUI"
          , "-e",  ticketLogDir+"/ticket.EFG"]
}

task guitarTestCaseTicketAllWidgets(type: JavaExec, dependsOn: guitarGui2EfgTicketAllWidgets) {
//     classpath = files(ticketLogDir + "/dist/TicketAllWidgets.jar") + fileTree("lib")
     classpath = fileTree(autDir) + fileTree("lib")
     main = "edu.umd.cs.guitar.testcase.TestCaseGenerator"
     jvmArgs = ["-Dlog4j.configuration=log/examples/ticket/guitar.log"]
     args = ["-p", "RandomSequenceLengthCoverage"
          , "-e",  ticketLogDir+"/ticket.EFG"
          , "-d",  ticketLogDir+"/testcases"
          , "-l", "0"
          , "-m", "200"]
}

task guitarTicketAllWidgets(dependsOn: guitarTestCaseTicketAllWidgets) {}


defaultTasks 'clean', 'guitarTicketAllWidgets'

/*
task guitarReplayTicketAllWidgets() {
    fileTree(ticketLogDir + "/testcases/" ).each {File file ->
        task "guitar_${file.name}" (type: JavaExec, dependsOn: guitarTestCaseTicketAllWidgets)        {
//        classpath = files(ticketLogDir + "/dist/TicketAllWidgets.jar") + fileTree("lib")
     classpath = fileTree(autDir) + fileTree("lib")
        main = "edu.umd.cs.guitar.replayer.JFCReplayerMain"
        jvmArgs = ["-Dlog4j.configuration=log/examples/ticket/guitar.log"]
        args = ["-c", "examples.ticket.TicketAllWidgets"
        , "-g", ticketLogDir + "/ticket.GUI"
        , "-e",  ticketLogDir+"/ticket.EFG"
        , "-t", ticketLogDir + "/testcases/" + file.name
        , "-i", "2000"
        , "-d", "200"
        , "-l", ticketLogDir + "/log/" + file.name + ".log"
        , "-gs", ticketLogDir + "/states/" + file.name + ".sta"
        , "-cf", "./src/main/java/examples/ticket/configure/configuration.xml"
        , "-ts"]
        }
    }
}
*/
task catgTicketAllWidgets(){
    fileTree(ticketLogDir + "/testcases/" ).each {File file ->
        task "catg_${file.name}" (type: JavaExec, dependsOn: guitarTestCaseTicketAllWidgets)        {
//        classpath = files(ticketLogDir + "/dist/TicketAllWidgets.jar") + fileTree("lib")
       classpath = fileTree(autDir) + fileTree("lib")
      main = "edu.umd.cs.guitar.replayer.JFCReplayerMain"
        jvmArgs = ["-Djanala.loggerClass=janala.logger.DirectConcolicExecution"
                , "-Djanala.conf=./catg.conf"
                , "-javaagent:./lib/catg-dev.jar"
                , "-Dlog4j.configuration=log/examples/ticket/guitar.log"]
        args = ["-c", "examples.ticket.TicketAllWidgets"
        , "-g", ticketLogDir + "/ticket.GUI"
        , "-e",  ticketLogDir+"/ticket.EFG"
        , "-t", ticketLogDir + "/testcases/" + file.name
        , "-i", "2000"
        , "-d", "200"
        , "-l", ticketLogDir + "/log/" + file.name + ".log"
        , "-gs", ticketLogDir + "/states/" + file.name + ".sta"
        , "-cf", "./src/main/java/examples/ticket/configure/configuration.xml"
        , "-ts"]
        }
}
}

task catg(dependsOn: tasks.matching { Task task -> task.name.startsWith("catg_")}){

}

task runTicketAllWidgets {}